AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: HelloWorld Lambda function template for Application Load Balancer Lambda as target

#Parameters:
#  VpcId:
#    Type: AWS::EC2::VPC::Id

Resources:
  SimpleFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: An Application Load Balancer Lambda Target that returns "HelloWorld"
      Handler: index.handler
      Runtime: python3.7
      InlineCode: |
        def handler(event, context):
          return {
            "statusCode": 200,
            "statusDescription": "HTTP OK",
            "isBase64Encoded": False,
            "headers": {
              "Content-Type": "text/html"
            },
            "body": "<h1>Hello from Lambda!</h1>"
          }
      Timeout: 1
      VpcConfig:
        SecurityGroupIds:
          - !Ref LoadBalancerSecurityGroup
        SubnetIds:
          # マルチAZならここを増やす
          - 'Fn::ImportValue': !Sub 'example-vpc-public-az-a-subnet'

  DyanamodbStreamFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: An Application Load Balancer Lambda Target that returns "HelloWorld"
      Handler: index.handler
      Runtime: python3.7
      InlineCode: |
        def handler(event, context):
          return {
            "statusCode": 200,
            "statusDescription": "HTTP OK",
            "isBase64Encoded": False,
            "headers": {
              "Content-Type": "text/html"
            },
            "body": "<h1>Hello from Lambda!</h1>"
          }
      Timeout: 1
      VpcConfig:
        SecurityGroupIds:
          - !Ref LoadBalancerSecurityGroup
        SubnetIds:
          - 'Fn::ImportValue': !Sub 'example-vpc-public-az-a-subnet'

  SqsTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: An Application Load Balancer Lambda Target that returns "HelloWorld"
      Handler: index.handler
      Runtime: python3.7
      InlineCode: |
        def handler(event, context):
          return {
            "statusCode": 200,
            "statusDescription": "HTTP OK",
            "isBase64Encoded": False,
            "headers": {
              "Content-Type": "text/html"
            },
            "body": "<h1>Hello from Lambda!</h1>"
          }
      Timeout: 1
      VpcConfig:
        SecurityGroupIds:
          - !Ref LoadBalancerSecurityGroup
        SubnetIds:
          - 'Fn::ImportValue': !Sub 'example-vpc-public-az-a-subnet'

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: [ 'Fn::ImportValue': !Sub 'example-vpc-public-az-a-subnet', 'Fn::ImportValue': !Sub 'example-vpc-public-az-b-subnet' ]
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: HelloWorldFunctionInvokePermission
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt SimpleFunction.Arn

  HttpListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !ImportValue example-vpc-vpc-id
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  HelloWorldFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SimpleFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com

Outputs:
  LoadBalancerDNSNAme:
    Value: !GetAtt LoadBalancer.DNSName
